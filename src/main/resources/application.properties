#Configuração de Volumes e Montagens:
quarkus.kubernetes.mounts.my-volume.path=/where/to/mount
#Para configurar volumes Secret e ConfigMap, você pode utilizar as seguintes configurações:
quarkus.kubernetes.secret-volumes.my-volume.secret-name=my-secret
quarkus.kubernetes.config-map-volumes.my-volume.config-map-name=my-config-map
#Passagem de Configuração da Aplicação:
quarkus.kubernetes.app-secret=<name of the secret containing the configuration>
quarkus.kubernetes.app-config-map=<name of the config map containing the configuration>
#Ajuste do Número de Réplicas:
quarkus.kubernetes.replicas=3
#Gerenciamento de Recursos do Container:
quarkus.kubernetes.resources.requests.memory=64Mi
quarkus.kubernetes.resources.requests.cpu=250m
quarkus.kubernetes.resources.limits.memory=512Mi
quarkus.kubernetes.resources.limits.cpu=1000m
#Exposição da sua aplicação no Kubernetes: Para gerar o recurso Ingress e expor sua aplicação, utilize a seguinte configuração:
quarkus.kubernetes.ingress.expose=true

#Nome da Imagem e Versão:
quarkus.container-image.group=fernando
quarkus.container-image.name=meukubernets
quarkus.container-image.tag=1.0.0

#Registry do Docker:
quarkus.container-image.registry=gcr.io

#Build e Push da Imagem: Se você deseja que o Quarkus construa e faça o push da imagem para o registry como
# parte do processo de build, você pode configurar as seguintes propriedades:
quarkus.container-image.build=true
quarkus.container-image.push=false